Spring @Configuration annotation 
============================
helps in Spring annotation based configuration. 
@Configuration annotation indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime.

It does not need any external xml file for required beans configurations.

 @Configuration
 public class AppConfig {
 	  @Bean
 	  public MyServiceImpl  myService() {
 	      return new MyServiceImpl();
 	  }
 }


Spring MVC and Java-Based Configuration
---------------------------

1. Make a maven web archtype project.
   under src/main create folder : java
2. update pom.xml as : [ use servlet-3 ]

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring.version>4.3.0.RELEASE</spring.version>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
       <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.3.0.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
  </dependencies>

3. Creating the SpringConfig Class

For Java-based configuration, create a class called SpringConfig, where register all Spring-related beans using Spring's Java-based configuration style by @Bean. This class will replace the need to create a xml file for spring configuration under WEB-INF folder.

package com.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

@EnableWebMvc
@ComponentScan(basePackages = "com")
@Configuration
public class SpringConfig extends WebMvcConfigurerAdapter{
   
    @Bean
    public ViewResolver viewResolver() {
    	InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
        viewResolver.setViewClass(JstlView.class);
        viewResolver.setPrefix("/WEB-INF/jsp/");
        viewResolver.setSuffix(".jsp");
        return viewResolver;
    }
    @Override
    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }
}

NOTE:
************************
<context:component-scan/>	=> @ComponentScan()	
Scan starts from base package and registers all controllers, repositories, service, beans, etc.

<mvc:annotation-driven/>   	=> @EnableWebMvc	
Enable Spring MVC-specific annotations like @Controller

Spring config file	=>@Configuration	
Treat as the configuration file for Spring MVC-enabled applications.

@Bean => to register a bean object in IOC
Here, @Bean tag to register ViewResolver. Here, We use InternalResourceViewResolver.

4. Replacing Web.xml
------------
Create another class, which will replace traditional web.xml. 
use Servlet 3.0 and extend org.springframework.web.WebApplicationInitializer class.


package com.config;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;
import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;

public class WebServletConfiguration implements WebApplicationInitializer{
public void onStartup(ServletContext ctx) throws ServletException {
AnnotationConfigWebApplicationContext webCtx = new AnnotationConfigWebApplicationContext();
webCtx.register(SpringConfig.class);
webCtx.setServletContext(ctx);
ServletRegistration.Dynamic servlet = ctx.addServlet("dispatcher", new DispatcherServlet(webCtx));
servlet.setLoadOnStartup(1);
servlet.addMapping("*.do");
    }
}

NOTE:
****
Here SpringConfig class and add DispatcherServlet, acts as FrontController of Spring MVC application.
SpringConfig class is the source of Spring beans.

5. Create a Controller Class
Now create a Controller class, Which will work for request URL from the browser.

package com.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class MyController {

@RequestMapping(path= "/greet",method=RequestMethod.GET)    
public String greet(){
         System.out.println("greet is invoked");
         return "show";
    }
}


6. Create a JSP Page to Show the Message under WEB-INF/jsp folder: show.jsp

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1> May God Goddess bless you all......</h1>
</body>
</html>




