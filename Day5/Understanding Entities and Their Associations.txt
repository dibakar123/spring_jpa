Understanding Entities and Their Associations
------------------------------
Entities can contain references to other entities, either directly as an embedded property or field, or indirectly via a collection of some sort (arrays, sets, lists, etc.). 
These associations are represented using foreign key relationships in the underlying tables. 
These foreign keys will rely on the identifiers used by participating tables.

When only one of the pair of entities contains a reference to the other, the association is unidirectional. If the association is mutual, then it is referred to as bidirectional.

In hibernate mapping associations, one (and only one) of the participating classes is referred to as “managing the relationship” and other one is called “managed by” using ‘mappedBy’ property. We should not make both ends of association “managing the relationship”. Never do it.

two simple entities (AccountEntity and EmployeeEntity) with one-to-one association between them.

@Entity
@Table(name = "Account")
public class AccountEntity {
   @Id
   @Column(name = "ID", unique = true, nullable = false)
   @GeneratedValue(strategy = GenerationType.SEQUENCE)
   private Integer           accountId;
 
   @Column(name = "ACC_NO", unique = false, nullable = false, length = 100)
   private String            accountNumber;
 
   //We will define the association here
   EmployeeEntity            employee;
 
   //Getters and Setters are not shown for brevity
}


@Entity
@Table(name = "Employee")
public class EmployeeEntity {
   @Id
   @Column(name = "ID", unique = true, nullable = false)
   @GeneratedValue(strategy = GenerationType.SEQUENCE)
   private Integer           employeeId;
   @Column(name = "FIRST_NAME", unique = false, nullable = false, length = 100)
   private String            firstName;
   @Column(name = "LAST_NAME", unique = false, nullable = false, length = 100)
   private String            lastName;
 
   //We will define the association here
   AccountEntity             account;
 
   //Getters and Setters are not shown for brevity
}

Scenario 1) Association managed by both entities
In this type of association, define the association as below using @OneToOne annotation.

//Inside EmployeeEntity.java
@OneToOne
AccountEntity       account;
 
//Inside AccountEntity.java
@OneToOne
EmployeeEntity      employee;

With above association, both ends are managing the association so both must be updated with information of each other using setter methods defined in entity java files. 
If fail to do so, will not be able to fetch the associated entity information and it will be returned as null.

// Create new Employee object
      EmployeeEntity emp = new EmployeeEntity();
      emp.setFirstName("Lokesh");
      emp.setLastName("Gupta");
 
      // Create new Employee object
      AccountEntity acc = new AccountEntity();
      acc.setAccountNumber("DUMMY_ACCOUNT");
      emp.setAccount(acc);
      //acc.setEmployee(emp);
 
      sessionOne.save(acc);
      sessionOne.save(emp);
      sessionOne.getTransaction().commit();
 
      Integer genEmpId = emp.getEmployeeId();
      Integer genAccId  = acc.getAccountId();
 
      Session sessionTwo = HibernateUtil.getSessionFactory().openSession();
      sessionTwo.beginTransaction();
      EmployeeEntity employee = (EmployeeEntity) sessionTwo.get(EmployeeEntity.class, genEmpId);
      AccountEntity account = (AccountEntity) sessionTwo.get(AccountEntity.class, genAccId);
 
      System.out.println(employee.getEmployeeId());
      System.out.println(employee.getAccount().getAccountNumber());
      System.out.println(account.getAccountId());
      System.out.println(account.getEmployee().getEmployeeId());
 
      HibernateUtil.shutdown();
   }
}

Output:
20
DUMMY_ACCOUNT
10
Exception in thread "main" java.lang.NullPointerException
    at com.howtodoinjava.test.TestHibernate.main(TestHibernate.java:43) 

see that had set the account entity in employee entity, so able to get it. 
BUT commented the line “acc.setEmployee(emp);” and thus not set the employee entity inside account entity, so not able to get it.

Also observe the insert queries above. Both tables have foreign key association with column names employee_ID and account_ID respectively. 
It’s example of circular dependency in data and can easily bring down application any time.

To correctly store above relationship, you must un-comment the line “acc.setEmployee(emp);“.
Now Test:
20
DUMMY_ACCOUNT
10
20

Scenario 2) Association managed by single entity
Let’s say association is managed by EmployeeEntity then the annotations in both entity will look like below.

//Inside EmployeeEntity.java
@OneToOne
AccountEntity       account;
 
//Inside AccountEntity.java
@OneToOne (mappedBy = "account")
EmployeeEntity      employee;

Now to tell hibernate the association is managed by EmployeeEntity, add ‘mappedBy‘ attribute inside AccountEntity to make it manageable. 
Now to test above code , set the association only once using “emp.setAccount(acc);” and employee entity is which is managing the relationship. 
AccountEntity dos not need to know anything explicitly.

Session sessionOne = HibernateUtil.getSessionFactory().openSession();
sessionOne.beginTransaction();
 
// Create new Employee object
EmployeeEntity emp = new EmployeeEntity();
emp.setFirstName("Lokesh");
emp.setLastName("Gupta");
 
// Create new Employee object
AccountEntity acc = new AccountEntity();
acc.setAccountNumber("DUMMY_ACCOUNT");
emp.setAccount(acc);
//acc.setEmployee(emp);
 
sessionOne.save(acc);
sessionOne.save(emp);
sessionOne.getTransaction().commit();
 
Integer genEmpId = emp.getEmployeeId();
Integer genAccId  = acc.getAccountId();
 
Session sessionTwo = HibernateUtil.getSessionFactory().openSession();
sessionTwo.beginTransaction();
EmployeeEntity employee = (EmployeeEntity) sessionTwo.get(EmployeeEntity.class, genEmpId);
AccountEntity account = (AccountEntity) sessionTwo.get(AccountEntity.class, genAccId);
 
System.out.println(employee.getEmployeeId());
System.out.println(employee.getAccount().getAccountNumber());
System.out.println(account.getAccountId());
System.out.println(account.getEmployee().getEmployeeId());
 
HibernateUtil.shutdown();

Output:
 
Hibernate: insert into Account (ACC_NO, ID) values (?, ?)
Hibernate: insert into Employee (account_ID, FIRST_NAME, LAST_NAME, ID) values (?, ?, ?, ?)
20
DUMMY_ACCOUNT
10
20

Remember that to make an association the owner, must mark the other end as being mapped by the other.
owner is to be declared by "mapped by"

One-to-one
------	
Either end can be made the owner, but one (and only one) of them should be; if don’t specify this, will end up with a circular dependency.

One-to-many
------
The many end must be made the owner of the association.

Many-to-one
--------
This is the same as the one-to-many relationship viewed from the opposite perspective, 
so the same rule applies: the many end must be made the owner of the association.

Many-to-many
--------
Either end of the association can be made the owner.





