1. create a maven web app
 remove index.jsp
 make a new folder under src/main as 'java'

2. update pom.xml :

   <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring.version>4.3.0.RELEASE</spring.version>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
       <dependency>
    	<groupId>org.springframework</groupId>
    	<artifactId>spring-webmvc</artifactId>
    	<version>${spring.version}</version>
   </dependency>
  <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>${spring.version}</version>
   </dependency>
     <dependency>
    	<groupId>com.oracle</groupId>
    	<artifactId>ojdbc14</artifactId>
    	<version>14</version>
	</dependency>
	   <dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
  <version>2.7.3</version>
 </dependency>
  </dependencies>

3.  update web.xml and add DispatcherServlet configuration

 <servlet>
  <servlet-name>springrest</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  <servlet-name>springrest</servlet-name>
  <url-pattern>/</url-pattern>
  </servlet-mapping>

4. add springrest-servlet.xml under WEB-INF
 
5. create 3 packages :  com.controller /  com.model  / com.dao

6. create models under model-package as :  User.java and RestResponse.java

6.1

public class User {
  private String username;
  private String password;
  private String firstname;
  private String lastname;
  private String email;
  private String address;
  private String phone;
  ......
}

6.2

public class RestResponse {
  private int code;
  private String message;
  private List<User> data;
......
}

7. Now design an interface and its implemented class under dao-package:

7.1.

public interface UserDao {
   public List<User> getUsers();
}

7.2.

@Repository("userdao")
public class UserDaoImpl implements UserDao {

  @Autowired
  JdbcTemplate jdbcTemplate;
   .......
  public List<User> getUsers(){
  String sql = "select * from myusers";
  List<User> users = jdbcTemplate.query(sql, new UserMapper());
  return  users;
  }
  
  class UserMapper implements RowMapper<User> {
	  public User mapRow(ResultSet rs, int arg1) throws SQLException {
	    User user = new User();
	    user.setUsername(rs.getString("username"));
	    user.setFirstname(rs.getString("firstname"));
	    user.setLastname(rs.getString("lastname"));
	    user.setEmail(rs.getString("email"));
	    user.setAddress(rs.getString("address"));
	    user.setPhone(rs.getString("phone"));
	    return user;
	  }
   }

}


8. Now design restcontroller as : SpringRestController under controller - package

@RestController
public class SpringRestController {
	
@Autowired
UserDao userdao;
	
@RequestMapping(value = "/userlist", method = RequestMethod.GET,headers="Accept=application/json")
public RestResponse getUser() {
	List<User> ulist= userdao.getUsers();
	RestResponse response= new RestResponse();
	if(ulist.size()>0){
		response.setCode(200);
		response.setMessage("get records");
		response.setData(ulist);
	}
	else {
		response.setCode(404);
		response.setMessage("not found records");
		response.setData(ulist);
	}
	return response;  	
    }
}

9. deploy app in tomcat and check from web browser or postman app:    /userlist

---- Now check rest url with path parameter

10. Now design an interface and its implemented class under dao-package:

10.1.

public interface UserDao {
   public List<User> getUsers();
   public User getUser(String uid); // newly add
}

10.2.

@Repository("userdao")
public class UserDaoImpl implements UserDao {

@Autowired
JdbcTemplate jdbcTemplate;
......
public User getUser(String uid) {
String sql = "select * from myusers where username=?";
List<User> users = jdbcTemplate.query(sql, new Object[]{uid},new UserMapper());
return users.size() > 0 ? users.get(0) : null;
  }
}

11. Now design restcontroller as : SpringRestController under controller - package

@RestController
public class SpringRestController {
	
@Autowired
UserDao userdao;
......
@RequestMapping(value = "/userlist/{uid}", method = RequestMethod.GET)
public RestResponse getUserById(@PathVariable String uid) {

	RestResponse response= new RestResponse();
	User user= userdao.getUser(uid);
	ArrayList<User> alist =new ArrayList<User>();
	alist.add(user);
	if(user!=null){
		response.setCode(200);
		response.setMessage("get record");
		response.setData(alist);
	}else {
		response.setCode(404);
		response.setMessage("not found records");
		response.setData(alist);
	}
	return response;  
   }
}

12. deploy app in tomcat and check from web browser or postman app:    /userlist/aaa

-------- Now check rest url with POST method to insert data in table

13. Now design an interface and its implemented class under dao-package:

13.1.

public interface UserDao {
   public List<User> getUsers();
   public User getUser(String uid); 
   int register(User user); // newly add
}

13.2.

@Repository("userdao")
public class UserDaoImpl implements UserDao {

@Autowired
JdbcTemplate jdbcTemplate;
......
public int register(User user) {

String sql = "insert into myusers values(?,?,?,?,?,?,?)";
int r= jdbcTemplate.update(sql, new Object[] { user.getUsername(), user.getPassword(), user.getFirstname(),user.getLastname(), user.getEmail(), 
user.getAddress(), user.getPhone() });
return r;
  }
}


14. Now design restcontroller as : SpringRestController under controller - package

@RestController
public class SpringRestController {
	
@Autowired
UserDao userdao;
......	
@PostMapping(value = "/adduser",headers = "Accept=application/json")
public RestResponse addUser(@RequestBody User user) {
	int result = userdao.register(user);
	RestResponse response= new RestResponse();
	ArrayList<User> alist =new ArrayList<User>();
	alist.add(user);
	if (result>0) {
		response.setCode(200);
		response.setMessage("insert record");
		response.setData(alist);
	}else {
		response.setCode(404);
		response.setMessage("insert not record");
		response.setData(alist);
	}
	return response;  
     }
  }

15. deploy app in tomcat and check from  postman app:    /adduser
under body...raw section give dataset in json format as:
{
   "username": "test",
   "password": "test",
   "firstname": "test1",
   "lastname": "test2",
   "email": "test3",
   "address": "test4",
   "phone": "test5"
}

