Hands-On 2

=================

In MYSQL

Create database opm_learn;

use opm_learn;

create table country(co_code varchar(2) primary key, co_name varchar(50));

insert into country values ('IN', 'India');

insert into country values ('US', 'United States of America');

insert into country values ('NI', 'Indonesia');

insert into country values ('UK', 'United kingdom');



===========

Make a maven web app project



------Make entity class------------

package com.cognizant.ormlearn.model;



import javax.persistence.Column;

import javax.persistence.Entity;

import javax.persistence.Id;

import javax.persistence.Table;



@Entity

@Table(name="country")

public class Country {

	

 @Id

 @Column(name="co_code")

 private String code;

	

 @Column(name="co_name")

 private String name;

	

 public String getCode() {

 return code;

 }

 public void setCode(String code) {

 this.code = code;

 }

 public String getName() {

 return name;

 }

 public void setName(String name) {

 this.name = name;

 }

	

 @Override

 public String toString() {

 return "Country [code=" + code + ", name=" + name + "]";

 }



}







=================== Make a Repository interface

package com.pack.springbootDataJpa1.repository;



import java.util.List;



import org.springframework.data.jpa.repository.Query;



import org.springframework.data.repository.query.Param;

import org.springframework.stereotype.Repository;



import com.pack.springbootDataJpa1.model.Country;





@Repository

public interface CountryRepository extends CrudRepository<Country, String> {





 public List<Country> findByNameContaining(String searchName);



public List<Country> findByNameContainingOrderByNameDesc(String searchName);



public List<Country> findByNameStartingWith(String index);



}





========Make a service class====

package com.pack.springbootDataJpa1.service;



import java.util.List;



import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;



import com.pack.springbootDataJpa1.model.Country;

import com.pack.springbootDataJpa1.repository.CountryRepository;





@Service

public class CountryService {

 @Autowired

 CountryRepository repo;





 @Transactional

 public List<Country> getAllCountries(String name) {

 //return repo.findByNameContaining(name);

 return repo.findByNameContainingOrderByNameDesc(name);

 }



 @Transactional

 public List<Country> getAllCountriesByIndex(String index) {

 return repo.findByNameStartingWith(index);

}







}





===========Make a controler class==========

package com.pack.springbootDataJpa1.controller;



import java.util.List;

import java.util.Optional;



import javax.validation.Valid;



import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.validation.BindingResult;

import org.springframework.web.bind.annotation.ModelAttribute;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.ResponseBody;

import org.springframework.web.servlet.ModelAndView;



import com.pack.springbootDataJpa1.model.Country;

import com.pack.springbootDataJpa1.service.CountryService;





@Controller

public class CountryController {



 @Autowired

 CountryService countryService;





 @RequestMapping(path="/viewcountry", method=RequestMethod.GET)

 public String getData() {

 return "viewcountry";



 }



  @RequestMapping(path="/getcountry", method=RequestMethod.GET)

   public ModelAndView getCountry(String cname) {

    List<Country> clist= countryService.getAllCountries(cname);

    if(clist!=null || clist.size()>0) {

     ModelAndView mav = new ModelAndView("viewcountry");

     mav.addObject("clist",clist);

     return mav;

    }

    else {

       ModelAndView mav = new ModelAndView("viewcountry");

     return mav;

    }

 }



  @RequestMapping(path="/getcountrybyindex", method=RequestMethod.GET)

  public ModelAndView getCountryByIndex(String index) {

    List<Country> clist= countryService.getAllCountriesByIndex(index);

    if(clist!=null || clist.size()>0) {

     ModelAndView mav = new ModelAndView("viewcountry");

     mav.addObject("clist",clist);

     return mav;

    }

    else {

      ModelAndView mav = new ModelAndView("viewcountry");

     return mav;

    }

 }



}





=====Make a JSP file named viewcountry.jsp under  WEB-INF/page folder



<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

<html>

<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Country Search</title>

<style>

  .error {

    color: red; font-weight: bold;

  }

</style>

</head>

<body>

<div align="center">



<a href='getcountrybyindex?index=A'>A</a> |

<a href='getcountrybyindex?index=I'>I</a> |

<a href='getcountrybyindex?index=U'>U</a> |

<a href='getcountrybyindex?index=Y'>Y</a> |

<a href='getcountrybyindex?index=Z'>Z</a> |

<hr>



<form action="getcountry" method="get">

<table>

<tr>

<td align="left" width="20%">Enter Country Name to search: </td>

<td align="left" width="40%"><input type="text" name="cname" size="30"/>

<input type="submit" value="search"/></td>

</tr>

</table>

</form>

<hr>

<table>

<tbody>

<tr><th>Country Code</th><th>Name of Country</th></tr>

<c:forEach items="${clist}" var="country">

<tr><td><c:out value="${country.code}"></c:out></td>

<td><c:out value="${country.name}"></c:out></td>

</tr>

</c:forEach>

</tbody>

</table>



</div>

</body>

</html>





=== application.properties file under src/main/resources as

logging.level.org.springframework=info

logging.level.com.cognizant=debug

# Log pattern

logging.pattern.console=%d{dd-MM-yy} %d{HH:mm:ss.SSS} %-20.20thread %5p %-25.25logger{25} %25M %4L %m%n





spring.mvc.view.suffix=.jsp

spring.mvc.view.prefix=/WEB-INF/page/

spring.mvc.static-path-pattern=/resources/**



spring.datasource.url=jdbc:mysql://localhost/opm_learn?useSSL=false

spring.datasource.username=root

spring.datasource.password=dibakar

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver





# Hibernate configuration

#hibernate.hbm2ddl.auto =create

#validate

#spring.jpa.hibernate.ddl-auto=create



spring.jpa.show-sql=true

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect





# HikariCP settings spring.datasource.hikari.*

#60 sec

#spring.datasource.hikari.connection-timeout=60000

# max 5

#spring.datasource.hikari.maximum-pool-size=5

#spring.jpa.hibernate.ddl-auto=create-drop





===== Change pom.xml depencies as:



 <dependencies>

  <dependency>

   <groupId>junit</groupId>

   <artifactId>junit</artifactId>

   <scope>test</scope>

  </dependency>

   <dependency>

  <groupId>org.springframework.boot</groupId>

  <artifactId>spring-boot-starter-web</artifactId>

 </dependency>

 <!-- jpa, crud repository -->

    <dependency>

      <groupId>org.springframework.boot</groupId>

      <artifactId>spring-boot-starter-data-jpa</artifactId>

    </dependency>

 <dependency>

   <groupId>org.apache.tomcat.embed</groupId>

   <artifactId>tomcat-embed-jasper</artifactId>

   <scope>provided</scope>

</dependency>

 <dependency>

  <groupId>mysql</groupId>

  <artifactId>mysql-connector-java</artifactId>

  <scope>runtime</scope>

 </dependency>

 <dependency>

  <groupId>javax.servlet</groupId>

  <artifactId>jstl</artifactId>

  </dependency>

 </dependencies>





=== Main Application as:



package com.pack.springbootDataJpa1;



@SpringBootApplication

public class MainApplication {



private static final Logger LOGGER = LoggerFactory.getLogger(MainApplication.class); 



@SuppressWarnings("unused")

 private static ApplicationContext ctx=null;



 public static void main(String[] args) {

 ctx = SpringApplication.run(MainApplication.class, args);

  

}

}



import org.springframework.data.repository.CrudRepository;~